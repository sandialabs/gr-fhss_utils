# auto-generated by grc.converter

id: fhss_utils_fft_burst_tagger
label: FFT Burst Tagger
category: '[Sandia]/FHSS Utilities'

parameters:
# "GENERAL" tab:
-   id: center_frequency
    label: Center Frequency
    dtype: float
    default: '1626000000'
-   id: sample_rate
    label: Sample Rate
    dtype: int
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '1024'
-   id: threshold
    label: Threshold
    dtype: float
    default: '7'
-   id: debug
    label: Debug Output
    dtype: bool
    default: 'False'
# "BURST CONFIG" tab:
-   id: max_bursts
    label: Max Simultaneous Bursts
    category: Burst Config
    dtype: int
    default: '0'
    hide: part
-   id: max_burst_len
    label: Max Length (FFTs)
    category: Burst Config
    dtype: int
    default: '0'
    hide: part
-   id: burst_pre_len
    label: Added Pre Burst Length (FFTs)
    category: Burst Config
    dtype: int
    default: '5'
    hide: part
-   id: burst_post_len
    label: Added Post Burst Length (FFTs)
    category: Burst Config
    dtype: int
    default: '20'
    hide: part
-   id: lookahead
    label: Burst Settling Time (FFTs)
    category: Burst Config
    dtype: int
    default: '10'
    hide: part
-   id: burst_width
    label: Burst Width (Hz)
    category: Burst Config
    dtype: int
    default: '500000'
    hide: part
-   id: history_size
    label: Noise History Length (FFTs)
    category: Burst Config
    dtype: int
    default: '64'
    hide: part
# "ADVANCED" tab:
-   id: preload_nf
    label: Noise Floor Preload (dB)
    category: Advanced
    dtype: float
    hide: part

inputs:
-   domain: stream
    dtype: complex

outputs:
-   domain: stream
    dtype: complex
-   domain: message
    id: debug
    optional: true

templates:
    imports: import fhss_utils
    make: |-
        fhss_utils.fft_burst_tagger(${center_frequency}, ${fft_size}, ${sample_rate}, ${burst_pre_len}, ${burst_post_len}, ${burst_width}, ${max_bursts}, ${max_burst_len}, ${threshold}, ${history_size}, ${lookahead}, ${debug})
        % if preload_nf:
        self.${id}.preload_noise_floor(${preload_nf}, bool(${preload_nf}))
        % endif

file_format: 1
